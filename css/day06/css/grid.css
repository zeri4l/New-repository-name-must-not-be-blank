* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

#main-grid-wrapper {
  display: grid;
  /*grid-template-rows: 60px 360px 100vh 180px; header banner main footer 행의 크기
  grid-template-columns: 320px 1fr; 열의 크기*/
  grid-template:
    "header header" 60px
    "banner banner" 360px
    "aside main" 1fr
    "footer footer" 180px
    / 320px 1fr;
}

#main-header {
  background-color: pink;
  /* grid-column: 1/3; */
  grid-area: header;
}

#main-banner-wrapper {
  background-color: aqua;
  /* grid-column: 1/3; */
  grid-area: banner;
}

#main-banner-container {
  width: 1080px;
  height: 100%;
  margin: 0 auto;
  background-color: blue;
  display: grid;
  grid-template-rows: 360px;
  grid-template-columns: repeat(4, 1080px);
  overflow: hidden;
}

#main-container-side {
  background-color: greenyellow;
  grid-area: aside;
}

#main-container {
  background-color: wheat;
  display: grid;
  justify-content: center;
  align-items: center;
  grid-template-columns: repeat(3, 30%);
  grid-template-columns: repeat(auto-fit, 320px);
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  /* repeat(n, 크기), auto-fit은 부모 요소 크기에 맞는 값 계산
  minmax(최솟값, 최댓값), 줄어들거나 더 늘어나지 않도록 설정이 가능)
    */
  gap: 10px;
  grid-area: main;
}

#main-container > .main-product-item {
  height: 200px;
  background-color: palevioletred;
}

footer {
  background-color: rgb(183, 72, 72);
  grid-column: 1/3;
  grid-area: footer;
}

/* 가급적 정렬 요소는 플렉스로 구현하는 것이 훨씬 편리
하지만 바둑판의 형태나, ui의 순서가 바뀌어야하는 경우라면 grid 레이아웃
따라서 필요에 의하여 구현하는 것이 가장 좋습니다. 

반드시 grid나 flex로 구현해야하는 경우는 없음 
css가 익숙해지기 전까지 grid를 쓰는 것은 지양하자

display: flex는 정렬을 위해 사용해도 괜찮다
*/
